# Generated by Django 5.2.7 on 2025-10-22 03:58

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CompanyAdmin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admins', to='core.company')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='company_admin', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Destination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Destination name or business name', max_length=200)),
                ('address', models.TextField(help_text='Full address of the destination')),
                ('latitude', models.DecimalField(decimal_places=7, help_text='Latitude coordinate', max_digits=10)),
                ('longitude', models.DecimalField(decimal_places=7, help_text='Longitude coordinate', max_digits=10)),
                ('is_base_location', models.BooleanField(default=False, help_text="Whether this is the company's base location (garage/warehouse)")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='destinations', to='core.company')),
            ],
            options={
                'verbose_name': 'Destination',
                'verbose_name_plural': 'Destinations',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Driver's full name", max_length=100)),
                ('phone', models.CharField(help_text="Driver's contact phone number", max_length=20)),
                ('license_number', models.CharField(help_text="Driver's license number", max_length=50)),
                ('experience_years', models.PositiveIntegerField(help_text='Years of driving experience', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('status', models.CharField(choices=[('available', 'Available'), ('on_mission', 'On Mission')], default='available', help_text='Current driver status', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drivers', to='core.company')),
            ],
            options={
                'verbose_name': 'Driver',
                'verbose_name_plural': 'Drivers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DriverUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('driver', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_account', to='core.driver')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='driver_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Truck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plate_number', models.CharField(help_text="Truck's license plate number", max_length=20)),
                ('model', models.CharField(help_text='Truck model and make', max_length=100)),
                ('capacity_kg', models.PositiveIntegerField(help_text='Maximum cargo capacity in kilograms')),
                ('fuel_type', models.CharField(choices=[('diesel', 'Diesel'), ('gasoline', 'Gasoline'), ('electric', 'Electric'), ('hybrid', 'Hybrid')], default='diesel', help_text='Type of fuel used', max_length=20)),
                ('current_status', models.CharField(choices=[('idle', 'Idle'), ('in_use', 'In Use')], default='idle', help_text='Current truck status', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trucks', to='core.company')),
            ],
            options={
                'verbose_name': 'Truck',
                'verbose_name_plural': 'Trucks',
                'ordering': ['plate_number'],
            },
        ),
        migrations.CreateModel(
            name='DeliveryTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(help_text='Name of the product being delivered', max_length=200)),
                ('product_weight', models.PositiveIntegerField(help_text='Weight of the product in kilograms')),
                ('status', models.CharField(choices=[('assigned', 'Assigned'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='assigned', help_text='Current status of the delivery task', max_length=20)),
                ('route_data', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='delivery_tasks', to='core.company')),
                ('destinations', models.ManyToManyField(help_text='Destinations for this delivery task', related_name='delivery_tasks', to='core.destination')),
                ('driver', models.ForeignKey(help_text='Driver assigned to this task', on_delete=django.db.models.deletion.CASCADE, related_name='delivery_tasks', to='core.driver')),
                ('truck', models.ForeignKey(help_text='Truck assigned to this task', on_delete=django.db.models.deletion.CASCADE, related_name='delivery_tasks', to='core.truck')),
            ],
            options={
                'verbose_name': 'Delivery Task',
                'verbose_name_plural': 'Delivery Tasks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddConstraint(
            model_name='destination',
            constraint=models.UniqueConstraint(condition=models.Q(('is_base_location', True)), fields=('company', 'is_base_location'), name='unique_base_location_per_company'),
        ),
        migrations.AddConstraint(
            model_name='driver',
            constraint=models.UniqueConstraint(fields=('company', 'license_number'), name='uniq_driver_company_license'),
        ),
        migrations.AddConstraint(
            model_name='truck',
            constraint=models.UniqueConstraint(fields=('company', 'plate_number'), name='uniq_truck_company_plate'),
        ),
    ]
